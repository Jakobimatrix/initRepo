# Enable shared library build options
function(enable_shared_libraries target_name)
    if (UNIX)
        target_compile_options("${target_name}" INTERFACE -fPIC)
        if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
            target_link_options("${target_name}" INTERFACE -fuse-ld=lld)
        endif ()
    endif ()
endfunction()

# Enable multithreading for a target
function(enable_multithreading target_name)
    if (UNIX OR MINGW)
        target_link_libraries("${target_name}" INTERFACE pthread)
    endif ()
    # MSVC links threads by default
endfunction()

# Enforce a consistent C++ standard on a target
function(enforce_clang_stl target_name stl_type)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        if (stl_type STREQUAL "libstdc++")
            target_compile_options("${target_name}" INTERFACE -stdlib=libstdc++)
            target_link_options("${target_name}" INTERFACE -stdlib=libstdc++)
            if (UNIX AND NOT APPLE)
                target_link_libraries("${target_name}" INTERFACE stdc++ supc++ c m)
            endif()
        elseif (stl_type STREQUAL "libc++")
            message(FATAL_ERROR "I could not compile with libc++. So I gave up... sorry.")
        else()
            message(FATAL_ERROR "Unknown STL type: '${stl_type}' (use 'libstdc++'")
        endif()
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        message(STATUS "GCC will use libstdc++ (default)")
    elseif (MSVC)
        message(STATUS "MSVC STL in use (default, cannot be changed)")
    else()
        message(WARNING "Unknown compiler: cannot enforce standard library")
    endif()
endfunction()
