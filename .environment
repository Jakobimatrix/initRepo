# .environment
# This file defines environment variables for compiler versions, paths, and tool versions.

# Detect architecture
ARCH=$(uname -m 2>/dev/null || echo "unknown")
case "$ARCH" in
    x86_64|amd64)
        ARCH_BITS="x64"
        ARCH="amd"
        ;;
    i386|i486|i586|i686)
        ARCH_BITS="x86"
        ARCH="amd"
        ;;
    arm64|aarch64)
        ARCH_BITS="x64"
        ARCH="arm"
        ;;
    armv7l|armv6l)
        ARCH_BITS="x86"
        ARCH="arm"
        ;;
    *)
        ARCH_BITS="unknown"
        ARCH="unknown"
        ;;
esac

# Detect environment
if grep -qi microsoft /proc/version 2>/dev/null; then
    ENVIRONMENT="WSL"
elif [[ "$OSTYPE" == "msys" ]]; then
    ENVIRONMENT="Windows-msys"
elif [[ "$OSTYPE" == "cygwin" ]]; then
    ENVIRONMENT="Windows-cygwin"
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    ENVIRONMENT="Linux"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    ENVIRONMENT="macOS"
else
    ENVIRONMENT="Unknown"
fi

# Common compiler versions
GCC_VERSION=13
CLANG_VERSION=19
MSVC_VERSION="2022"

DEFAULT_COMPILER="g++"

# Common tool versions
CLANG_FORMAT_VERSION=19
CLANG_TIDY_VERSION=19

# Set paths based on environment
if [[ "$ENVIRONMENT" == "Windows-msys" ]]; then
    # MSYS2 paths
    MINGW_GCC_BASE="C:/msys64/mingw64/bin"
    MINGW_32_GCC_BASE="C:/msys64/mingw32/bin"
    
    # Compiler paths
    GCC_CPP_PATH="${MINGW_GCC_BASE}/g++.exe"
    GCC_C_PATH="${MINGW_GCC_BASE}/gcc.exe"
    GCC_32_CPP_PATH="${MINGW_32_GCC_BASE}/g++.exe"
    GCC_32_C_PATH="${MINGW_32_GCC_BASE}/gcc.exe"

    CLANG_CPP_PATH="${MINGW_GCC_BASE}/clang++.exe"
    CLANG_C_PATH="${MINGW_GCC_BASE}/clang.exe"
    CLANG_32_CPP_PATH="${MINGW_32_GCC_BASE}/clang++.exe"
    CLANG_32_C_PATH="${MINGW_32_GCC_BASE}/clang.exe"

    # Tool paths
    CLANG_FORMAT_PATH="${MINGW_GCC_BASE}/clang-format.exe"
    CLANG_TIDY_PATH="${MINGW_GCC_BASE}/clang-tidy.exe"

    # Import MSVC environment variables dynamically
    function setup_msvc_env() {
        local arch_bits="$1"
        local vswhere_path
        vswhere_path=$(cmd.exe /C "where vswhere.exe" 2>/dev/null | tr -d '\r' || true)
        if [[ -z "$vswhere_path" || ! -f "$vswhere_path" ]]; then
            for path in \
                "C:/Program Files (x86)/Microsoft Visual Studio/Installer/vswhere.exe" \
                "C:/Program Files/Microsoft Visual Studio/Installer/vswhere.exe"
            do
                [[ -f "$path" ]] && vswhere_path="$path" && break
            done
        fi

        if [[ -z "$vswhere_path" || ! -f "$vswhere_path" ]]; then
            echo "Error: vswhere.exe not found!"
            return 1
        fi

        local vs_base
        vs_base=$(cmd.exe /C "\"$vswhere_path\" -latest -products * -requires Microsoft.Component.MSBuild -property installationPath" | tr -d '\r')
        if [[ -z "$vs_base" ]]; then
            echo "Error: Visual Studio installation not found via vswhere!"
            return 1
        fi

        local vs_bat
        if [[ "$arch_bits" == "x86" ]]; then
            vs_bat=$(find "$vs_base" -type f -iname "vcvars32.bat" 2>/dev/null | head -n 1)
        else
            vs_bat=$(find "$vs_base" -type f -iname "vcvars64.bat" 2>/dev/null | head -n 1)
        fi

        # If not found, try known fallback paths
        if [[ -z "$vs_bat" || ! -f "$vs_bat" ]]; then
            if [[ "$arch_bits" == "x86" ]]; then
                for path in \
                    "$vs_base/VC/Auxiliary/Build/vcvars32.bat" \
                    "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars32.bat" \
                    "C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Auxiliary/Build/vcvars32.bat" \
                    "C:/Program Files (x86)/Microsoft Visual Studio/2022/BuildTools/VC/Auxiliary/Build/vcvars32.bat"
                do
                    [[ -f "$path" ]] && vs_bat="$path" && break
                done
            else
                for path in \
                    "$vs_base/VC/Auxiliary/Build/vcvars64.bat" \
                    "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat" \
                    "C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Auxiliary/Build/vcvars64.bat" \
                    "C:/Program Files (x86)/Microsoft Visual Studio/2022/BuildTools/VC/Auxiliary/Build/vcvars64.bat"
                do
                    [[ -f "$path" ]] && vs_bat="$path" && break
                done
            fi
        fi

        # Still not found? Fail with clear error
        if [[ -z "$vs_bat" || ! -f "$vs_bat" ]]; then
            echo "Error: Could not find vcvars script for architecture $arch_bits"
            return 1
        fi

        echo "Loading MSVC environment from $vs_bat"
        eval "$(
            cmd.exe /C "\"$vs_bat\" && set" | \
            grep -E "^(INCLUDE|LIB|LIBPATH|PATH)=" | \
            sed 's/\r$//' | \
            awk -F= '{print "export " $1 "=\"" $2 "\""}'
        )"

        export CC=cl.exe
        export CXX=cl.exe
    }

elif [[ "$ENVIRONMENT" == "macOS" ]]; then
    echo ""
    echo "!!! THIS ENVIRONMENT IS NOT TESTED !!!"
    echo ""
    BREW_PREFIX="$(brew --prefix)"
    GCC_CPP_PATH="${BREW_PREFIX}/bin/g++-${GCC_VERSION}"
    GCC_C_PATH="${BREW_PREFIX}/bin/gcc-${GCC_VERSION}"
    CLANG_CPP_PATH="/usr/bin/clang++"  # macOS uses system clang
    CLANG_C_PATH="/usr/bin/clang"
    
    CLANG_FORMAT_PATH="${BREW_PREFIX}/bin/clang-format"
    CLANG_TIDY_PATH="${BREW_PREFIX}/bin/clang-tidy"
else
    # Linux/WSL/Windows-cygwin
    GCC_CPP_PATH="/usr/bin/g++-${GCC_VERSION}"
    GCC_C_PATH="/usr/bin/gcc-${GCC_VERSION}"
    CLANG_CPP_PATH="/usr/bin/clang++-${CLANG_VERSION}"
    CLANG_C_PATH="/usr/bin/clang-${CLANG_VERSION}"

    CLANG_FORMAT_PATH="/usr/bin/clang-format-${CLANG_FORMAT_VERSION}"
    CLANG_TIDY_PATH="/usr/bin/clang-tidy-${CLANG_TIDY_VERSION}"
fi


echo "Detected environment: $ENVIRONMENT on $ARCH-$ARCH_BITS"


