# .environment
# This file defines environment variables for compiler versions, paths, and tool versions.

# Detect architecture
ARCH=$(uname -m 2>/dev/null || echo "unknown")
case "$ARCH" in
    x86_64|amd64)
        ARCH_BITS="x64"
        ARCH="amd"
        ;;
    i386|i486|i586|i686)
        ARCH_BITS="x86"
        ARCH="amd"
        ;;
    arm64|aarch64)
        ARCH_BITS="x64"
        ARCH="arm"
        ;;
    armv7l|armv6l)
        ARCH_BITS="x86"
        ARCH="arm"
        ;;
    *)
        ARCH_BITS="unknown"
        ARCH="unknown"
        ;;
esac

# Detect environment
if grep -qi microsoft /proc/version 2>/dev/null; then
    ENVIRONMENT="WSL"
elif [[ "$OSTYPE" == "msys" ]]; then
    ENVIRONMENT="Windows-msys"
elif [[ "$OSTYPE" == "cygwin" ]]; then
    ENVIRONMENT="Windows-cygwin"
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    ENVIRONMENT="Linux"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    ENVIRONMENT="macOS"
else
    ENVIRONMENT="Unknown"
fi

# Common compiler versions
GCC_VERSION=13
CLANG_VERSION=19
MSVC_VERSION="2022"

DEFAULT_COMPILER="g++"

# Common tool versions
CLANG_FORMAT_VERSION=19
CLANG_TIDY_VERSION=19

# Set paths based on environment
if [[ "$ENVIRONMENT" == "Windows-msys" ]]; then
    # MSYS2 paths
    MINGW_GCC_BASE="C:/msys64/mingw64/bin"
    MINGW_32_GCC_BASE="C:/msys64/mingw32/bin"
    
    # Compiler paths
    GCC_CPP_PATH="${MINGW_GCC_BASE}/g++.exe"
    GCC_C_PATH="${MINGW_GCC_BASE}/gcc.exe"
    GCC_32_CPP_PATH="${MINGW_32_GCC_BASE}/g++.exe"
    GCC_32_C_PATH="${MINGW_32_GCC_BASE}/gcc.exe"

    CLANG_CPP_PATH="${MINGW_GCC_BASE}/clang++.exe"
    CLANG_C_PATH="${MINGW_GCC_BASE}/clang.exe"
    CLANG_32_CPP_PATH="${MINGW_32_GCC_BASE}/clang++.exe"
    CLANG_32_C_PATH="${MINGW_32_GCC_BASE}/clang.exe"

    # Tool paths
    CLANG_FORMAT_PATH="${MINGW_GCC_BASE}/clang-format.exe"
    CLANG_TIDY_PATH="${MINGW_GCC_BASE}/clang-tidy.exe"

    # Import MSVC environment variables dynamically
    function setup_msvc_env() {
        local arch_bits="$1"
        local vs_base=$(cmd.exe /C "vswhere.exe -latest -products * -requires Microsoft.Component.MSBuild -property installationPath" | tr -d '\r')
        if [[ -z "$vs_base" ]]; then
            echo "Error: Visual Studio 2022 not found via vswhere!"
            return 1
        fi

        local vs_bat
        if [[ "$arch_bits" == "x86" ]]; then
            vs_bat="${vs_base}/vcvars32.bat"
        else
            vs_bat="${vs_base}/vcvars64.bat"
        fi

        if [[ ! -f "$vs_bat" ]]; then
            echo "Error: Could not find MSVC environment script: $vs_bat"
            return 1
        fi

        echo "Loading MSVC environment from $vs_bat"
        eval "$(
            cmd.exe /C "\"$vs_bat\" && set" | \
            grep -E "^(INCLUDE|LIB|LIBPATH|PATH)=" | \
            sed 's/\r$//' | \
            awk -F= '{print "export " $1 "=\"" $2 "\""}'
        )"

        export CC=cl.exe
        export CXX=cl.exe
    }

elif [[ "$ENVIRONMENT" == "macOS" ]]; then
    echo ""
    echo "!!! THIS ENVIRONMENT IS NOT TESTES !!!"
    echo ""
    BREW_PREFIX="$(brew --prefix)"
    GCC_CPP_PATH="${BREW_PREFIX}/bin/g++-${GCC_VERSION}"
    GCC_C_PATH="${BREW_PREFIX}/bin/gcc-${GCC_VERSION}"
    CLANG_CPP_PATH="/usr/bin/clang++"  # macOS uses system clang
    CLANG_C_PATH="/usr/bin/clang"
    
    CLANG_FORMAT_PATH="${BREW_PREFIX}/bin/clang-format"
    CLANG_TIDY_PATH="${BREW_PREFIX}/bin/clang-tidy"
else
    # Linux/WSL/Windows-cygwin
    GCC_CPP_PATH="/usr/bin/g++-${GCC_VERSION}"
    GCC_C_PATH="/usr/bin/gcc-${GCC_VERSION}"
    CLANG_CPP_PATH="/usr/bin/clang++-${CLANG_VERSION}"
    CLANG_C_PATH="/usr/bin/clang-${CLANG_VERSION}"

    CLANG_FORMAT_PATH="/usr/bin/clang-format-${CLANG_FORMAT_VERSION}"
    CLANG_TIDY_PATH="/usr/bin/clang-tidy-${CLANG_TIDY_VERSION}"
fi


echo "Detected environment: $ENVIRONMENT on $ARCH-$ARCH_BITS"


