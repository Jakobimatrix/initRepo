name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update submodules
      run: git submodule update --init --recursive

    - name: Install GCC
      run: |
        source .environment
        sudo apt-get update
        sudo apt-get install -y gcc-${GCC_VERSION} g++-${GCC_VERSION}

    - name: Set up GCC as default
      run: |
        source .environment
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_VERSION} 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${GCC_VERSION} 100

    - name: Install Clang
      run: |
        source .environment
        sudo apt-get update
        sudo apt-get install -y clang-${CLANG_VERSION} lld

    - name: Ensure ld.lld is available for Clang
      run: |
        source .environment
        if ! command -v ld.lld &>/dev/null; then
          sudo ln -s /usr/bin/ld.lld-${CLANG_VERSION} /usr/bin/ld.lld
        fi

    - name: Set up Clang as default
      run: |
        source .environment
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${CLANG_VERSION} 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${CLANG_VERSION} 100

    - name: Check clang-format
      run: ./checkClangFormat.sh

    - name: Check clang-tidy
      run: ./checkClangTidy.sh

    - name: Build and test with GCC 13
      run: ./build.sh -c -d -t --compiler gcc

    - name: Build and test with Clang 19
      run: ./build.sh -c -d -t --compiler clang

    - name: Build fuzzer with Clang 19
      run: ./build.sh -d -f --compiler clang 

    - name: Build release and test with GCC 13
      run: ./build.sh -c -r -t --compiler gcc

    - name: Build release and test with Clang 19
      run: ./build.sh -c -r -t --compiler clang

    - name: Build release fuzzer with Clang 19
      run: ./build.sh -r -f --compiler clang
